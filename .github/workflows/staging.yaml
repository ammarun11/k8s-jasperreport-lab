name: Dev/Staging Deployment

on:
  push:
    tags:
      - 'v*'

jobs:
  build-image:
    name: build Image & Push Image to Dockerhub
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: staging

      - name: Get Version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
          
      - name: Create Image
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          cd jasperreports
          docker build -t jasperreports:${{ steps.get-version.outputs.VERSION }}-rc .
          echo 'Created Image with name:tag = jasperreports:${{ steps.get-version.outputs.VERSION }}-rc'
      
      - name: get-images-id
        id: image-id
        run: |
          echo ::set-output name=IMAGE_ID::$(docker images -q jasperreports:${{ steps.get-version.outputs.VERSION }}-rc)
      
      - name: Push Images
        run: |
          # Staging Image
          echo Push image for Staging
          docker tag ${{ steps.image-id.outputs.IMAGE_ID }} palopalepalo/jasperreports:8-${{ steps.get-version.outputs.VERSION }}-rc
          docker push palopalepalo/jasperreports:8-${{ steps.get-version.outputs.VERSION }}-rc
          # Production Image
          echo Push image for Production
          docker tag palopalepalo/jasperreports:8-${{ steps.get-version.outputs.VERSION }}-rc palopalepalo/jasperreports:8-${{ steps.get-version.outputs.VERSION }}
          docker push palopalepalo/jasperreports:8-${{ steps.get-version.outputs.VERSION }}


      - name: Update Staging Helm Chart Values
        run: |
          cd helm/jasperreports
          # Update Helm Chart Version
          yq e -i '.version="8-${{ steps.get-version.outputs.VERSION }}"' Chart.yaml
          yq e -i '.appVersion="8-${{ steps.get-version.outputs.VERSION }}"' Chart.yaml
          cat Chart.yaml

          # Update Staging Values
          yq e -i '.image.repository="palopalepalo/jasperreports"' values.yaml
          cat values.yaml
          yq e -i '.image.repository="palopalepalo/jasperreports"' values-stg.yaml
          cat values-stg.yaml

          yq e -i '.image.tag="8-${{ steps.get-version.outputs.VERSION }}"' values.yaml
          cat values.yaml
          yq e -i '.image.tag="8-${{ steps.get-version.outputs.VERSION }}"' values-stg.yaml
          cat values-stg.yaml

          # Update Production Values
          yq e -i '.image.repository="palopalepalo/jasperreports"' values-stg.yaml
          cat values-prd.yaml
          yq e -i '.image.tag="8-${{ steps.get-version.outputs.VERSION }}"' values-prd.yaml
          cat values-prd.yaml


      - name: Update Environment Variable
        run: |
          cd helm
          echo VERSION=${{ steps.get-version.outputs.VERSION }} > version.env

      - name: Push Change Back to Github Staging Branch
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: helm
          destination_repo: ammarun11/k8s-jasperreport-lab
          destination_branch: staging
          user_email: cintadamai46@gmail.com
          user_name: ammarun11
          commit_message: Update k8s helm image version to ${{ steps.get-version.outputs.VERSION }}

  deploy-staging:
    name: Deploy Staging
    #needs: [build-image, image-scanning]
    needs: [build-image]
    runs-on: self-hosted
    environment:
      name: Staging
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: ArgoCD Deploy to Staging
        run: |
          argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_USER }} --password  ${{ secrets.ARGOCD_PASS}}
#          argocd app create jasperreports-stg --project default --repo https://github.com/ammarun11/k8s-jasperreport-lab.git --path helm/jasperreports --revision ${{ steps.get-version.outputs.VERSION }} --dest-namespace jasperreports-server-stg --dest-server https://kubernetes.default.svc --upsert
          argocd app create jasperreports-stg --project default --repo https://github.com/ammarun11/k8s-jasperreport-lab.git --helm-chart jasperreports --revision ${{ steps.get-version.outputs.VERSION }} --values values-stg.yaml --dest-namespace jasperreports-server-stg --dest-server https://kubernetes.default.svc --upsert
          argocd --grpc-web app sync jasperreports-stg --force
          argocd --grpc-web app wait jasperreports-stg --timeout 300
  # create-pr-prod:
  #   name: Create Pull Request to Production
  #   needs:  deploy-staging
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout staging branch
  #       uses: actions/checkout@v3
  #       with:
  #         ref: staging

  #     - name: Create pull request to production
  #       id: cpr
  #       uses: peter-evans/create-pull-request@v4
  #       with:
  #         token: ${{ secrets.API_TOKEN_GITHUB }}
  #         commit-message: Request Merge for Production branch
  #         title: Request Merge for Production branch
  #         body: Request Merge for Production branch
  #         base: staging
  #         labels: automated-pr, merge-to-prod
  #         branch: production

  #     - name: Check outputs
  #       if: ${{ steps.cpr.outputs.pull-request-number }}
  #       run: |
  #         echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
  #         echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
  #         echo "Pull Request Operation - ${{ steps.cpr.outputs.pull-request-operation }}"
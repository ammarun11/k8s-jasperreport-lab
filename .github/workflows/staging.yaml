name: Dev/Staging Deployment

on:
  push:
    tags:
      - 'v*'
# on:
#   push:
#     branches:
#       - staging
env:
  IMAGE_TAG_JASPER: 8.0.0
  IMAGE_TAB_DB: 10.6

jobs:
  update-image:
    name: Update Image & Push Chart to Harbor
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: staging

      - name: Get Version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      
      - name: Update Staging Helm Chart Values
        run: |
          cd helm/jasperreports
          # Update Helm Chart Version
          yq e -i '.version="${{ steps.get-version.outputs.VERSION }}"' Chart.yaml
          yq e -i '.appVersion="${{ env.IMAGE_TAG_JASPER }}"' Chart.yaml
          cat Chart.yaml

          # Update Staging Values
          yq e -i '.image.tag="${{ env.IMAGE_TAG_JASPER }}"' values.yaml
          cat values.yaml
          yq e -i '.image.tag="${{ env.IMAGE_TAG_JASPER }}"' values-stg.yaml
          cat values-stg.yaml

          # Update Production Values
          yq e -i '.image.tag="${{ env.IMAGE_TAG_JASPER }}"' values-prd.yaml
          cat values-prd.yaml


      - name: Update Environment Variable
        run: |
          cd helm
          echo VERSION=${{ steps.get-version.outputs.VERSION }} > version.env

      - name: Push Chart to Harbor
        run: |
          helm repo update
          cd helm
          helm cm-push --username ${{ secrets.HARBOR_USERNAME }} --password ${{ secrets.HARBOR_PASSWORD }} jasperreports/ ammar-jasper

      - name: Push Change Back to Github Staging Branch
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: helm
          destination_repo: ammarun11/k8s-jasperreport-lab
          destination_branch: staging
          user_email: naufalammarun11@gmail.com
          user_name: ammarun11
          commit_message: Update k8s helm image version to ${{ steps.get-version.outputs.VERSION }}

  # scan-image:
  #   name: Scan Image Vulnerability
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Scan Staging jasperreport-server image with Trivy
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: 'docker.io/bitnami/jasperreports:${{ env.IMAGE_TAG_JASPER }}'
  #         format: 'table'
  #         exit-code: '0'
  #         severity: 'MEDIUM,HIGH,CRITICAL'

  #     - name: Scan Staging mariadb image with Trivy
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: 'docker.io/bitnami/mariadb:${{ env.IMAGE_TAG_DB }}'
  #         format: 'table'
  #         exit-code: '0'
  #         severity: 'MEDIUM,HIGH,CRITICAL'

  deploy-staging:
    name: Deploy Staging
    #needs: [Update-image, image-scanning]
    needs: [update-image]
    runs-on: self-hosted
    environment:
      name: Staging
    steps:
      - name: ArgoCD Deploy to Staging
        run: |
          argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_USER }} --password  ${{ secrets.ARGOCD_PASS}}
          argocd app create jasperreport-server-stg --project default --repo https://github.com/ammarun11/k8s-jasperreport-lab.git --revision ${{ steps.get-version.outputs.VERSION }} --path ./helm/jasperreports --dest-namespace jasperreport-server-stg --dest-server https://kubernetes.default.svc --upsert
          argocd --grpc-web app sync jasperreport-server-stg --force
          argocd --grpc-web app wait jasperreport-server-stg --timeout 300

### weirdo
          # argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_USER }} --password  ${{ secrets.ARGOCD_PASS}}
          # argocd app create jasperreports-stg --project default --repo https://cx-harbor.btech.id/chartrepo/ammar-jasper --helm-chart jasperreports --revision ${{ steps.get-version.outputs.VERSION }} --values values-stg.yaml --dest-namespace jasperreports-server-stg --dest-server https://kubernetes.default.svc --upsert
          # argocd --grpc-web app sync jasperreports-stg --force
          # argocd --grpc-web app wait jasperreports-stg --timeout 300

  # create-pr-prod:
  #   name: Create Pull Request to Production
  #   needs:  deploy-staging
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout staging branch
  #       uses: actions/checkout@v3
  #       with:
  #         ref: staging

  #     - name: Create pull request to production
  #       id: cpr
  #       uses: peter-evans/create-pull-request@v4
  #       with:
  #         token: ${{ secrets.API_TOKEN_GITHUB_FEBRY }}
  #         commit-message: Request Merge for Production branch
  #         title: Request Merge for Production branch
  #         body: Request Merge for Production branch
  #         base: staging
  #         labels: automated-pr, merge-to-prod
  #         branch: production

  #     - name: Check outputs
  #       if: ${{ steps.cpr.outputs.pull-request-number }}
  #       run: |
  #         echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
  #         echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
  #         echo "Pull Request Operation - ${{ steps.cpr.outputs.pull-request-operation }}"